buildscript {
    repositories {
        // need to get up to the working directory of gradle-plugins build
        flatDir dir: "${project.projectDir}/../../../../../../build/libs"
        jcenter()
	mavenCentral()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:1.0.0"
        classpath "com.novoda:gradle-android-command-plugin:1.3.0"
        classpath "jp.leafytree.gradle:gradle-android-scala-plugin:1.3.1"
        classpath ":gradle-ensime:+"
     }
}

apply plugin: "com.android.application"
apply plugin: "jp.leafytree.android-scala"
apply plugin: "android-command"
apply plugin: "ensime"

ext {
  scalaLibraryVersion = "2.11.4"
  androidMinCompatVersion = 7
  androidSdkVersion = 21
  androidSupportVersion = androidSdkVersion + ".0.2"
  androidToolVersion = androidSdkVersion + ".1.1"
}

ensime {
  //targetFile = "${project.buildDir}/ensime_file"
  //cacheDir = "${project.buildDir}/ensime_cache"
    javaHome = "/Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home"
    javaFlags = ["-Xms1024m", "-Xmx1024m", "-XX:MaxPermSize=256m"]
    referenceSourceRoots = [javaHome + "/src.zip"]
    scalaVersion = scalaLibraryVersion
    compilerArgs = ["-feature", "-deprecation"]
}

repositories {
    jcenter()
}

dependencies {
    compile "com.android.support:support-v4:${androidSupportVersion}"
    compile "com.android.support:gridlayout-v7:${androidSupportVersion}"
    compile "com.android.support:cardview-v7:${androidSupportVersion}"
    compile "com.android.support:appcompat-v7:${androidSupportVersion}"

    compile "org.scala-lang:scala-library:${scalaLibraryVersion}"
}

// The sample build uses multiple directories to
// keep boilerplate and common code separate from
// the main sample code.
List<String> dirs = [
    "main",     // main sample code; look here for the interesting stuff.
    "common",   // components that are reused by multiple samples
    "template"  // boilerplate code that is generated by the sample template process
]

android {
    compileSdkVersion androidSdkVersion
    buildToolsVersion "${androidToolVersion}"

    defaultConfig {
        minSdkVersion androidMinCompatVersion
        targetSdkVersion androidSdkVersion
    }

    sourceSets {
        main {
            dirs.each { dir ->
                scala.srcDirs "src/${dir}/scala"
                res.srcDirs "src/${dir}/res"
            }
        }
        androidTest.setRoot("tests")
        androidTest.java.srcDirs = ["tests/src"]
    }

    lintOptions {
        absolutePaths false
        lintConfig file("lint.xml")
    }
}

task debugme << {
  println("Project: ${name}")
  println(">> BuildDir: ${buildDir.absolutePath}")
  println(">> CompileDebugClasspath: ${getTasksByName('compileDebugScala', false).toList().first().classpath.asPath}")
  println(">> CompileReleaseClasspath: ${getTasksByName('compileReleaseScala', false).toList().first().classpath.asPath}")
  println(">> CompileTestClasspath: ${getTasksByName('compileDebugTestScala', false).toList().first().classpath.asPath}")

  android.sourceSets.each {
    println("SourceSet: ${it.name}")
    println(">> CompileConfigurationName: ${it.compileConfigurationName}")
    // println(">> OutputDir: ${configurations.getByName(it.compileConfigurationName).}")
  }
  // println("SourceSet: Main: ClassName: ${android.sourceSets.main.class.name}")

  configurations.each {
    println("Configuration: ${it.name}")
    it.allArtifacts.each {
      println (">> Artifact: ${it.file.absolutePath}")
    }
  }

  tasks.each {
    println("Tasks: ${it.name}")
    println(">> ClassName: ${it.class.name}")
    if(it instanceof org.gradle.api.tasks.scala.ScalaCompile) {
      println(">> ClassPath: ${it.classpath.asPath}")
      println(">> ScalaClasspath: ${it.scalaClasspath.asPath}")
      println(">> DestinationDir: ${it.destinationDir}")
    }
  }
}
